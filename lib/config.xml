<!--First clarify the project structure, src is the main file (can contain folders), test is the test file (can contain folders), and lib is the referenced library
 The .class file generated in the process exists under the build (because src and test are directly selected, if the file contains many folders, the .class file under the build still exists under the corresponding file name) -->
<?xml version="1.0"?>   
<!--The project name is java-junit-template-prjecet
 The default execution is the test target, "." represents the current directory (the directory where build.xml is located) is the root directory -->
<project name="java-junit-template-project" default="test" basedir=".">
<!--property is a key-value pair, which can be used directly with ${name} in subsequent references -->
  <property name="main.build.dir" value="build/main" />  
  <property name="main.src.dir" value="src" />
  <property name="test.build.dir" value="build/test" />
  <property name="test.src.dir" value="test" />
<!--path, set the location of the referenced library, there is no subtag under the path, indicating that there is no library reference
 You can use refid for reference later -->
  <path id="classpath.base" />
<!--Lines 1 and 2 set the location of the referenced library, line 3 sets the location of the .class file, and line 4 references the previously set classpath.base-->
  <path id="classpath.test">
    <pathelement location="lib/junit-4.11.jar" />
    <pathelement location="lib/hamcrest-core-1.3.jar" />
    <pathelement location="${main.build.dir}"/>
    <path refid="classpath.base" />
  </path>
<!--target, as an execution project, need to rely on the project run, clean, that is, when choosing to execute the target, first execute run and clean-->
  <target name="test" depends="run, clean" />
<!--target, compile, generate .class file -->
  <target name="compile">
<!--mkdir, build directory, ${main.build.dir} indicates the attribute before quoting
 The value value is build/main, which means that the main folder is generated under build -->
    <mkdir dir="${main.build.dir}"/>
<!--javac, use the javac command to compile, srcdir is the location of the source file, that is, the file in src
 destdir is the destination file location, the compiled .class file will be saved under build/main.
 It should be noted that if multiple folders are included in src, all .java files in src will be compiled.
 And create a corresponding folder in build/main, save the .class file for the .java file.
 includeantruntime, whether to include the Ant runtime library in the classpath; the default is yes, unless build.sysclasspath is set.
 It is usually best to set it to false, otherwise an error will occur -->
    <javac srcdir="${main.src.dir}" destdir="${main.build.dir}" includeantruntime="false">
<!--The required library location, refid, reference the definition of classpath.base before -->
      <classpath refid="classpath.base"/>
    </javac>
  </target>
<!--target, build, build the test file, the target that needs to be dependent is compile-->
  <target name="build" depends="compile">
<!--mkdir, create a directory build/test-->
    <mkdir dir="${test.build.dir}"/>
<!--javac, compile test files, the source file directory is test, and the destination file directory is build/test-->
    <javac srcdir="${test.src.dir}" destdir="${test.build.dir}" includeantruntime="false">
<!--The library path that needs to be used when compiling, call the settings of the previous classpath.test-->
        <classpath refid="classpath.test"/>
    </javac>
<!--Print information: Build done-->
    <echo message="Build done" />
  </target>
  <!-- Test and build all files  -->
  <!-- To run this: use "ant" (default) or "ant run" -->
<!--target, run, run the test file, the target that needs to be dependent is build-->
  <target name="run" depends="build">
<!--junit, print test summary, stop the build if there is an error during runtime -->
    <junit printsummary="on" haltonfailure="yes">
<!---related path settings
 The first line of the referenced library location
 The second line is the location of the .class file -->
        <classpath>
          <path refid="classpath.test" />
          <pathelement location="${test.build.dir}"/>
        </classpath>
<!--Test report test output format, and whether to use file-->
        <formatter type="brief" usefile="false" />
<!--batchtest, to test all files in the format of **/*Test*.java under test1.
 You can also use the test tag to test a single file -->
        <batchtest>
            <fileset dir="${test.src.dir}" includes="**/*Test*.java" />
        </batchtest>
    </junit>
  </target>
  <!-- delete all class files -->
  <!-- To run this: use "ant clean" -->
<!--target, files generated during clean build process -->
  <target name="clean">
<!--delete, delete files, all files in the root directory of **/*.class format -->
    <delete>
        <fileset dir="${basedir}" includes="**/*.class" />
    </delete>
<!--echo, print information: clean done-->
    <echo message="clean done" />
  </target>
</project>